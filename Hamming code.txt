#include <math.h>
#include <stdio.h>
#include <stdlib.h>

int main() {
    int c = 0, parityBit, messageSize, msg[60], data[70], i, j = 1, k = 0;
    
    printf("Enter message size: ");
    scanf("%d", &messageSize);

    // Calculate the number of parity bits needed
    parityBit = 0;
    while ((messageSize + parityBit + 1) > pow(2, parityBit)) {
        parityBit++;
    }

    printf("Enter message bits (space separated): ");
    for (i = messageSize; i >= 1; i--) {
        scanf("%d", &msg[i]);
    }

    // Initialize data with 2's as placeholders for parity bits
    for (i = 1; i <= (messageSize + parityBit); i++) {
        if (i == pow(2, k)) {
            data[i] = 2;
            k++;
        } else {
            data[i] = msg[j];
            j++;
        }
    }

    // Calculate parity bits
    for (i = 1; i <= (messageSize + parityBit); i++) {
        if (data[i] == 2) {
            data[i] = 0;
            int count = 0;
            for (j = i; j <= (messageSize + parityBit); j += i) {
                for (k = 0; k < i && (j + k) <= (messageSize + parityBit); k++) {
                    if (data[j + k] == 1) {
                        count++;
                    }
                }
            }
            if (count % 2 == 1) {
                data[i] = 1;
            }
        }
    }

    printf("Generated hamming code: ");
    for (i = (messageSize + parityBit); i >= 1; i--) {
        printf("%d ", data[i]);
    }
    printf("\n\nEnter the received code (space separated): ");
    for (i = (messageSize + parityBit); i >= 1; i--) {
        scanf("%d", &data[i]);
    }

    // Correct errors if any
    int *parities = (int *)calloc(parityBit, sizeof(int));
    for (i = 1; i <= (messageSize + parityBit); i++) {
        if (i == pow(2, c)) {
            int count = 0;
            for (j = i; j <= (messageSize + parityBit); j += i) {
                for (k = 0; k < i && (j + k) <= (messageSize + parityBit); k++) {
                    if (data[j + k] == 1) {
                        count++;
                    }
                }
            }
            if (count % 2 == 1) {
                parities[c] = 1;
            } else {
                parities[c] = 0;
            }
            c++;
        }
    }

    c = 0;
    for (i = 0; i < parityBit; i++) {
        c += parities[i] * pow(2, i);
    }
    if (c == 0) {
        printf("No error in data\n");
    } else {
        printf("Error at position: %d\n", c);
        if (data[c] == 0) {
            data[c] = 1;
        } else {
            data[c] = 0;
        }
        printf("Code after error correction: ");
        for (i = (messageSize + parityBit); i >= 1; i--) {
            printf("%d ", data[i]);
        }
        printf("\n");
    }

    free(parities);
    return 0;
}
